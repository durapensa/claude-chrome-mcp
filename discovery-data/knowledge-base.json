{
  "metadata": {
    "version": "2.1.0",
    "lastUpdated": "2025-05-31T17:30:00Z",
    "discoveryMethod": "manual_network_capture + mcp_tool_analysis + pagination_workaround",
    "totalAPIs": 9,
    "totalUIElements": 0,
    "totalMCPTools": 25,
    "sessions": 3,
    "workarounds": 1,
    "conversationLimitBypass": "398 conversations (vs 30 tool limitation)"
  },
  "apis": {
    "chat_message_warning": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations/{conversation_id}/chat_message_warning",
      "method": "POST",
      "purpose": "Pre-message validation or warning check",
      "discoveredAt": "2025-05-31T16:46:00Z",
      "usage": "Called before sending messages to check for warnings",
      "parameters": {
        "required": ["message_text"],
        "optional": ["analytics_data"]
      },
      "mcpTools": ["send_message_to_claude_dot_ai_tab"],
      "implementation": "Triggered by DOM automation",
      "reliability": "high",
      "changes": []
    },
    "completion": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations/{conversation_id}/completion",
      "method": "POST",
      "purpose": "Main message completion endpoint with streaming response",
      "discoveredAt": "2025-05-31T16:46:00Z",
      "usage": "Primary endpoint for sending messages and receiving AI responses",
      "parameters": {
        "required": ["prompt", "parent_message_uuid"],
        "optional": ["timezone", "locale", "tools", "attachments", "files"]
      },
      "streaming": true,
      "contentType": "text/event-stream",
      "mcpTools": ["send_message_to_claude_dot_ai_tab"],
      "implementation": "Triggered by DOM automation",
      "reliability": "high",
      "changes": []
    },
    "organization_info": {
      "url": "https://claude.ai/api/organizations/{org_id}",
      "method": "GET",
      "purpose": "Organization metadata and configuration retrieval",
      "discoveredAt": "2025-05-31T16:46:00Z",
      "usage": "Fetches organization data and user permissions",
      "parameters": {
        "required": [],
        "optional": []
      },
      "mcpTools": ["implicit via page loads"],
      "implementation": "Browser page load",
      "reliability": "high",
      "changes": []
    },
    "conversation_tree": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations/{conversation_id}",
      "method": "GET",
      "purpose": "Conversation data retrieval with full message tree",
      "discoveredAt": "2025-05-31T16:46:00Z",
      "usage": "Loads complete conversation history and message relationships",
      "parameters": {
        "required": [],
        "optional": ["tree", "rendering_mode", "render_all_tools"]
      },
      "mcpTools": ["implicit via page loads"],
      "implementation": "Browser page load",
      "reliability": "high",
      "changes": []
    },
    "conversation_latest": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations/{conversation_id}/latest",
      "method": "GET",
      "purpose": "Latest conversation state and message retrieval",
      "discoveredAt": "2025-05-31T16:46:00Z",
      "usage": "Gets the most recent state of a conversation",
      "parameters": {
        "required": [],
        "optional": []
      },
      "mcpTools": ["implicit via page loads"],
      "implementation": "Browser page load",
      "reliability": "high",
      "changes": []
    },
    "conversation_list": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations",
      "method": "GET",
      "purpose": "Retrieve list of user conversations",
      "discoveredAt": "2025-05-31T17:00:00Z",
      "usage": "Fetches paginated conversation list with metadata",
      "parameters": {
        "required": [],
        "optional": ["offset", "limit"]
      },
      "mcpTools": ["get_claude_conversations", "search_claude_conversations"],
      "implementation": "API proxy via authenticated context",
      "reliability": "high",
      "changes": []
    },
    "conversation_delete": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations/{conversation_id}",
      "method": "DELETE",
      "purpose": "Delete a specific conversation",
      "discoveredAt": "2025-05-31T17:00:00Z",
      "usage": "Permanently removes conversation from account",
      "parameters": {
        "required": ["uuid"],
        "optional": []
      },
      "mcpTools": ["delete_claude_conversation"],
      "implementation": "API proxy via authenticated context",
      "reliability": "high",
      "changes": []
    },
    "conversation_search": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations",
      "method": "GET",
      "purpose": "Search conversations with client-side filtering",
      "discoveredAt": "2025-05-31T17:00:00Z",
      "usage": "Uses conversation_list API with local filtering",
      "parameters": {
        "api": ["offset", "limit"],
        "filtering": ["titleSearch", "titleRegex", "dateRanges", "messageCount"]
      },
      "mcpTools": ["search_claude_conversations"],
      "implementation": "API proxy + client-side filtering",
      "reliability": "high",
      "changes": []
    },
    "conversation_pagination_workaround": {
      "url": "https://claude.ai/api/organizations/{org_id}/chat_conversations",
      "method": "GET",
      "purpose": "Retrieve all conversations using pagination to bypass 30-conversation limit",
      "discoveredAt": "2025-05-31T17:30:00Z",
      "usage": "Multiple API calls with offset/limit to fetch complete conversation history",
      "parameters": {
        "required": ["offset", "limit"],
        "authentication": ["lastActiveOrg cookie"]
      },
      "mcpTools": ["workaround for get_claude_conversations limitation"],
      "implementation": "Manual pagination with authenticated API calls",
      "reliability": "high",
      "limitations": {
        "current_tools": "Limited to 30 conversations",
        "workaround_capability": "All conversations (398 verified)"
      },
      "performance": {
        "batch_size": 100,
        "total_time": "~800ms for 398 conversations",
        "api_calls": 4
      },
      "changes": []
    }
  },
  "mcpTools": {
    "authenticationProxy": {
      "description": "Tools that use existing browser session to make API calls",
      "tools": ["get_claude_conversations", "search_claude_conversations", "delete_claude_conversation"],
      "implementation": "fetch() calls from authenticated tab context",
      "security": "Reuses session cookies and CSRF tokens"
    },
    "domAutomation": {
      "description": "Tools that simulate user interactions with Claude.ai UI",
      "tools": ["send_message_to_claude_dot_ai_tab", "get_claude_dot_ai_response"],
      "implementation": "Chrome debugger API + script injection",
      "triggers": "Natural API workflows via UI interactions"
    },
    "tabManagement": {
      "description": "Tools that manage browser tabs",
      "tools": ["spawn_claude_dot_ai_tab", "get_claude_dot_ai_tabs", "open_claude_dot_ai_conversation_tab"],
      "implementation": "Chrome tabs API",
      "capabilities": "Tab creation, querying, activation"
    },
    "networkMonitoring": {
      "description": "Tools that monitor network traffic for API discovery",
      "tools": ["start_network_inspection", "stop_network_inspection", "get_captured_requests"],
      "implementation": "Chrome debugger Network domain",
      "capabilities": "Real-time traffic monitoring and analysis"
    }
  },
  "patterns": {
    "authentication": {
      "type": "header-based + session-cookies",
      "headers": [
        "anthropic-anonymous-id",
        "anthropic-device-id", 
        "anthropic-client-platform",
        "anthropic-client-sha",
        "anthropic-client-version"
      ],
      "description": "Device fingerprinting and session tracking",
      "mcpImplementation": "Session reuse from authenticated browser context"
    },
    "messageWorkflow": {
      "steps": [
        "1. Validate message via /chat_message_warning",
        "2. Send message via /completion (streaming)",
        "3. Fetch organization context",
        "4. Update conversation tree",
        "5. Retrieve latest conversation state"
      ],
      "timing": "Sequential with some parallel requests",
      "mcpImplementation": "DOM automation triggers natural workflow"
    },
    "responseHandling": {
      "streaming": "Server-sent events (SSE)",
      "compression": "Brotli and Zstandard",
      "caching": "CloudFlare CDN dynamic caching"
    },
    "apiProxy": {
      "description": "MCP tools execute API calls from authenticated context",
      "benefits": "No separate authentication, full API access",
      "limitations": "Requires browser context, same-origin policy"
    }
  },
  "infrastructure": {
    "cdn": "CloudFlare",
    "backend": "Google Cloud", 
    "security": "TLS 1.3, HSTS headers",
    "performance": "Edge caching, compression",
    "mcpIntegration": "Chrome extension bridge for API access"
  }
}