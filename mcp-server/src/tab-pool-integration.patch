--- server.js.original
+++ server.js
@@ -5,6 +5,7 @@
 const { CallToolRequestSchema, ListToolsRequestSchema } = require('@modelcontextprotocol/sdk/types.js');
 const WebSocket = require('ws');
 const EventEmitter = require('events');
+const TabPool = require('../../shared/tab-pool-v2');
 
 // Enhanced error handling and debugging utilities
 class ErrorTracker {
@@ -1499,9 +1500,20 @@ class ChromeMCPServer {
 
     this.hubClient = new AutoHubClient();
     this.lifecycleManager = new ProcessLifecycleManager();
+    
+    // Initialize tab pool if enabled
+    this.tabPool = null;
+    if (process.env.TAB_POOL_ENABLED !== '0') {
+      this.initializeTabPool();
+    }
+    
     this.setupLifecycleIntegration();
     this.setupToolHandlers();
   }
+  
+  initializeTabPool() {
+    console.error('Claude Chrome MCP: Initializing tab pool...');
+    this.tabPool = new TabPool(this.hubClient);
+  }
 
   setupLifecycleIntegration() {
     // Register cleanup tasks
@@ -1510,6 +1522,13 @@ class ChromeMCPServer {
         this.hubClient.close();
       }
     });
+    
+    // Add tab pool cleanup
+    this.lifecycleManager.addCleanupTask('tab-pool', async () => {
+      if (this.tabPool) {
+        await this.tabPool.shutdown();
+      }
+    });
 
     this.lifecycleManager.addCleanupTask('mcp-server', async () => {
       if (this.server) {
@@ -1537,7 +1556,14 @@ class ChromeMCPServer {
             name: 'spawn_claude_tab',
             description: 'Create a new Claude.ai tab',
             inputSchema: {
-              type: 'object',
+              type: 'object', 
+              properties: {
+                url: {
+                  type: 'string',
+                  description: 'Optional URL to navigate to (defaults to claude.ai)',
+                  default: 'https://claude.ai'
+                },
+                usePool: {
+                  type: 'boolean',
+                  description: 'Whether to use tab pool (default: true if pool enabled)',
+                  default: true
+                }
+              },
               additionalProperties: false
             }
           },
@@ -1978,6 +2004,42 @@ class ChromeMCPServer {
           }
         ]
       };
+      
+      // Add pool management tools if enabled
+      if (this.tabPool) {
+        tools.push(
+          {
+            name: 'get_tab_pool_stats',
+            description: 'Get statistics and status of the tab pool',
+            inputSchema: {
+              type: 'object',
+              properties: {},
+              additionalProperties: false
+            }
+          },
+          {
+            name: 'release_tab_to_pool',
+            description: 'Release a tab back to the pool for reuse',
+            inputSchema: {
+              type: 'object',
+              properties: {
+                tabId: {
+                  type: 'number',
+                  description: 'The tab ID to release back to the pool'
+                }
+              },
+              required: ['tabId'],
+              additionalProperties: false
+            }
+          }
+        );
+      }
+      
+      return { tools };
     });
 
     // Handle tool calls
@@ -1996,7 +2058,25 @@ class ChromeMCPServer {
           case 'spawn_claude_tab':
-            result = await this.hubClient.sendRequest('spawn_claude_tab', args);
+            // Use tab pool if enabled and requested
+            if (this.tabPool && args.usePool !== false) {
+              try {
+                const tabId = await this.tabPool.acquire();
+                result = {
+                  success: true,
+                  id: tabId,
+                  source: 'pool',
+                  message: `Acquired tab ${tabId} from pool`
+                };
+              } catch (poolError) {
+                console.error('Claude Chrome MCP: Tab pool acquire failed:', poolError);
+                // Fallback to regular spawn
+                result = await this.hubClient.sendRequest('spawn_claude_tab', args);
+              }
+            } else {
+              result = await this.hubClient.sendRequest('spawn_claude_tab', args);
+            }
+            break;
+            
+          case 'release_tab_to_pool':
+            if (!this.tabPool) {
+              throw new Error('Tab pool is not enabled');
+            }
+            await this.tabPool.release(args.tabId);
+            result = {
+              success: true,
+              message: `Tab ${args.tabId} released to pool`
+            };
+            break;
+            
+          case 'get_tab_pool_stats':
+            if (!this.tabPool) {
+              throw new Error('Tab pool is not enabled');
+            }
+            result = this.tabPool.getStats();
             break;
           case 'send_message_to_claude_tab':
             result = await this.hubClient.sendRequest('send_message_to_claude_tab', args);